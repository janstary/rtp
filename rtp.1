.\" Copyright (c) 2018 Jan Stary <hans@stare.cz>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.Dd June 29, 2018
.Dt RTP 1
.Os
.Sh NAME
.Nm rtp
.Nd debug RTP sessions
.Sh SYNOPSIS
.Nm
.Op Fl r
.Op Fl v
.Op Fl i Ar format
.Op Fl o Ar format
.Op input
.Op output
.Sh DESCRIPTION
.Nm
reads a stream of RTP packets from
.Ar input
and writes it to
.Ar output .
Both can be a named file or a network address.
By default,
.Nm
reads from standard input and writes to standard output.
A name of
.Sq -
also means standard input or output.
A network address is given as
.Oo Ar address Oc Ns Ar :port ,
where
.Ar address
is either an IP address in dot-decimal notation or a hostname
.Po
.Dq localhost
by default
.Pc ,
and
.Ar port
is a number.
.Pp
If the
.Ar output
is a local address
(i.e. an address assigned to a network interface of the local machine),
.Nm
will wait till someone sends a one-byte message to that address
and then will stream the input to them.
Similarly, if the
.Ar input
is a remote address,
.Nm
will try to send a one-byte message first to let them know we are reading.
For other combinations of input and output,
.Nm
behaves in the obvious way.
.Pp
The stream can be read or written in the following formats:
.Bl -tag -width Ds
.It Cm dump
The format of the original rtptools (see below).
A dump file starts with a text line of the form
.Dq #!rtptools1.0 addr/port ,
followed by a dumpfile header:
.Bd -literal
struct dumphdr {
	struct {
		uint32_t sec;
		uint32_t usec;
	}		time;
	uint32_t	addr;
	uint16_t	port;
	uint16_t	zero;
};
.Ed
.Pp
When reading,
.Nm
ignores the starting line
and the addr and port stored in the above header.
When writing,
.Nm
sets them to zero.
.Pp
The actual RTP packets follow, each prefixed with:
.Bd -literal
struct dpkthdr {
	uint16_t dlen; /* stored packet length, including this   */
	uint16_t plen; /* original RTP (header + payload) length */
	uint32_t usec; /* dump time: usec since start time       */
};
.Ed
.Pp
If the payload was truncated during dump (see the
.Fl x
option),
.\"FIXME
dlen will be shorter than plen.
The RTP header is always there.
All fields are stored in the network byte order.
.It Cm net
The actual RTP packets being sent and received.
This is the only format used with network connections.
.It Cm raw
The actual audio payload of the RTP packet.
This format can only be used as an output to a file.
.Nm
has no support for the actual audio
and will not deal with the audio codec involved.
.It Cm txt
RTP packets described with lines of text.
.El
.Pp
For regular files, the format will be guessed from the file name suffix:
.Dq rtp
for
.Cm dump ,
.Dq raw
for
.Cm raw ,
and
.Dq txt
for
.Cm txt ,
with
.Cm dump
being the default if the format cannot be guessed from the name.
.Pp
The options are as follows.
.Pp
.Bl -tag -compact -width formatxxx
.It Fl i Ar format
Set the input format.
.It Fl o Ar format
Set the output format.
.It Fl r
Treat all addresses as remote.
.It Fl v
Be verbose about the packets.
.El
.Sh EXAMPLES
Read from a dump file, save the raw audio:
.Pp
.Dl $ rtp session.rtp session.raw
.Pp
Read from a dump file, stream rtp to whoever connects:
.Pp
.Dl $ rtp session.rtp localhost:1234
.Pp
Read from a dump file, stream rtp to a remote location:
.Pp
.Dl $ rtp session.rtp far.away.com:1234
.Pp
Read rtp on a local port, save a textual description:
.Pp
.Dl $ rtp localhost:1234 outfile.txt
.Pp
Read a rtp stream from a remote location, stream it to somewhere else.
This makes
.Nm
a RTP tunnel.
.Pp
.Dl $ rtp far.away.com:1234 somewhere.else.com:3456
.Pp
Read a rtp stream from a remote location, write audio payload to stdout.
This makes
.Nm
an RTP radio listener.
.Pp
.Dl $ rtp -o raw radio.com:1234
.Dl $ rtp -o raw radio.com:1234 | play -t raw -c 1 -r 8000 -e u-law -
.Pp
With the
.Fl r
option, network functionality can be run locally.
For example, the following two instances cannot run simultaneously:
.Pp
.Dl $ rtp session.rtp localhost:1234
.Dl $ rtp localhost:1234 session.raw
.Pp
As
.Dq localhost
resolves to a local address, the first instance will
.Xr bind 2
to port 1234 and stream the file to whoever connects, as described above.
The second instance will also try to
.Xr bind 2
to the port, and store whatever arrives there to the output file.
The second
.Xr bind 2
will fail.
Adding the
.Fl r
option to the second instance solves this
(whichever of the two is the second, in fact): in
.Pp
.Dl $ rtp    session.rtp localhost:1234
.Dl $ rtp -r localhost:1234 session.raw
.Pp
the second instance will treat
.Dq localhost
as a remote address, so the second
.Nm
will just connect there and read the output of the first one as its input.
Similarly, with
.Pp
.Dl $ rtp    localhost:1234 session.raw
.Dl $ rtp -r session.rtp localhost:1234
.Pp
the first one will wait for an input connection,
and the second will make that connection, treating
.Dq localhost
as a remote address.
.Pp
The following will set up a tunnel, a reader, and a writer:
.Pp
.Dl $ rtp    127.0.0.1:1234 127.0.0.1:3456
.Dl $ rtp -r 127.0.0.1:3456 session.raw
.Dl $ rtp -r session.rtp 127.0.0.1:1234
.Pp
The first instance (the tunnel) will wait for a connection to port 3456,
and then will read whatever arrives at 1234 and stream it out.
The second instance (the reader) will connect to 3456
(treating 127.0.0.1 as a remote address), waiting to read.
The third instance (the writer) will connect to 1234
(treating 127.0.0.1 as a remote address),
and will stream the content of the dump file there,
starting the pipeline flow.
.Sh HISTORY
In the early days of RTP, Henning Schulzrinne wrote a set of
.Dq rtptools
to debug RTP sessions;
.Nm
aims to replace rtptools.
Reading a local port and dumping it to a file is rtpdump.
Streaming a file to a remote location is rtpplay and rtpsend.
Reading from an address and streaming to another address is rtptrans.
.Sh AUTHORS
.An Jan Star√Ω Aq Mt hans@stare.cz
.Sh BUGS
By convention, RTP traffic happens on an even port number,
and the corresponding RTCP happens on the odd port+1.
.Nm
ignores that convention, only reads the specified
.Ar port ,
and misses the RTCP packets.
